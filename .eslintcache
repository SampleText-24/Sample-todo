[{"C:\\Code\\todo-app\\src\\index.js":"1","C:\\Code\\todo-app\\src\\App.js":"2","C:\\Code\\todo-app\\src\\reportWebVitals.js":"3","C:\\Code\\todo-app\\src\\components\\List\\List.jsx":"4","C:\\Code\\todo-app\\src\\components\\AddListButton\\AddListButton.jsx":"5","C:\\Code\\todo-app\\src\\components\\Badge\\Badge.jsx":"6","C:\\Code\\todo-app\\src\\components\\Tasks\\Tasks.jsx":"7","C:\\Code\\todo-app\\src\\components\\Tasks\\AddTaskForm\\AddTaskForm.jsx":"8","C:\\Code\\todo-app\\src\\components\\Tasks\\TasksItem\\TasksItem.jsx":"9"},{"size":318,"mtime":1611546925064,"results":"10","hashOfConfig":"11"},{"size":6402,"mtime":1611576293545,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":1652,"mtime":1611546053967,"results":"14","hashOfConfig":"11"},{"size":3379,"mtime":1611575712883,"results":"15","hashOfConfig":"11"},{"size":324,"mtime":1611063478760,"results":"16","hashOfConfig":"11"},{"size":1694,"mtime":1611576404403,"results":"17","hashOfConfig":"11"},{"size":2016,"mtime":1611545604842,"results":"18","hashOfConfig":"11"},{"size":2532,"mtime":1611576743476,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ktgqkd",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Code\\todo-app\\src\\index.js",[],["41","42"],"C:\\Code\\todo-app\\src\\App.js",["43"],"import React, { useState, useEffect } from \"react\";\nimport List from \"./components/List/List\"\nimport AddListButton from \"./components/AddListButton/AddListButton\";\nimport Tasks from \"./components/Tasks/Tasks\";\nimport axios from \"axios\";\nimport { Route, useHistory, useLocation } from 'react-router-dom'\n\n\nfunction App() {\n\n  const [lists, setLists] = useState(null)\n  const [colors, setColors] = useState(null)\n  const [activeList, setActiveList] = useState(null)\n  let history = useHistory()\n  let location = useLocation();\n\n    const onAddList = (obj) => {\n      const newList = [ ...lists, obj ]\n      setLists(newList)\n    }\n\n    const onAddTask = (listId, taskObj) => {\n        const newList = lists.map(item => {\n            if (item.id === listId) {\n                item.tasks = [...item.tasks, taskObj];\n            }\n            return item;\n        });\n        setLists(newList);\n    }\n\n    const onRemoveTask = (listId, taskId) => {\n        if (window.confirm('Delete task?')) {\n            const newList = lists.map(item => {\n                if (item.id === listId) {\n                    item.tasks = item.tasks\n                        .filter(task => task.id !== taskId);\n                }\n                return item;\n            });\n            setLists(newList);\n            axios\n                .delete('http://localhost:3001/tasks/' + taskId)\n                .catch(() => {\n                    alert('Failed to delete task')\n                })\n        }\n    }\n\n    const onCompleteTask = (listId, taskId, completed) => {\n        const newList = lists.map(list => {\n            if (list.id === listId) {\n                list.tasks = list.tasks.map(task => {\n                    if (task.id === taskId) {\n                        task.comleted = completed\n                    }\n                    return task\n                })\n            }\n            return list\n        })\n        setLists(newList)\n        axios\n            .patch('http://localhost:3001/tasks/' + taskId, {\n                completed\n            })\n    }\n\n    const onEditListTitle = (id, title) => {\n      const newList = lists.map(item => {\n        if (item.id === id) {\n            item.name = title\n        }\n        return item\n      })\n      setLists(newList)\n    }\n\n    useEffect(() => {\n      axios.get('http://localhost:3001/lists?_expand=color&_embed=tasks').then(({ data }) => {\n        setLists(data)\n      })\n      axios.get('http://localhost:3001/colors').then(({ data }) => {\n        setColors(data)\n      })\n    }, [])\n\n    useEffect(() => {\n      const listId = history.location.pathname.split('lists/')[1]\n      if (lists) {\n          const list = lists.find(list => list.id === Number(listId))\n          setActiveList(list)\n      }\n    }, [lists, history.location.pathname])\n\n  return (\n    <div className={\"todo\"}>\n      <div className={\"todo__sidebar\"}>\n        <List\n            onClickItem={list => {\n                history.push(`/`)\n            }}\n            items={[\n            {\n                icon: (\n                    <svg\n                        width=\"14\"\n                        height=\"12\"\n                        viewBox=\"0 0 14 12\"\n                        fill=\"none\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n                      <path\n                        d=\"M10.96 5.10001H5.74001C5.24321 5.10001 5.20001 5.50231 5.20001 6.00001C5.20001 6.49771 5.24321 6.90001 5.74001 6.90001H10.96C11.4568 6.90001 11.5 6.49771 11.5 6.00001C11.5 5.50231 11.4568 5.10001 10.96 5.10001ZM12.76 9.60001H5.74001C5.24321 9.60001 5.20001 10.0023 5.20001 10.5C5.20001 10.9977 5.24321 11.4 5.74001 11.4H12.76C13.2568 11.4 13.3 10.9977 13.3 10.5C13.3 10.0023 13.2568 9.60001 12.76 9.60001ZM5.74001 2.40001H12.76C13.2568 2.40001 13.3 1.99771 13.3 1.50001C13.3 1.00231 13.2568 0.600006 12.76 0.600006H5.74001C5.24321 0.600006 5.20001 1.00231 5.20001 1.50001C5.20001 1.99771 5.24321 2.40001 5.74001 2.40001ZM2.86001 5.10001H1.24001C0.743212 5.10001 0.700012 5.50231 0.700012 6.00001C0.700012 6.49771 0.743212 6.90001 1.24001 6.90001H2.86001C3.35681 6.90001 3.40001 6.49771 3.40001 6.00001C3.40001 5.50231 3.35681 5.10001 2.86001 5.10001ZM2.86001 9.60001H1.24001C0.743212 9.60001 0.700012 10.0023 0.700012 10.5C0.700012 10.9977 0.743212 11.4 1.24001 11.4H2.86001C3.35681 11.4 3.40001 10.9977 3.40001 10.5C3.40001 10.0023 3.35681 9.60001 2.86001 9.60001ZM2.86001 0.600006H1.24001C0.743212 0.600006 0.700012 1.00231 0.700012 1.50001C0.700012 1.99771 0.743212 2.40001 1.24001 2.40001H2.86001C3.35681 2.40001 3.40001 1.99771 3.40001 1.50001C3.40001 1.00231 3.35681 0.600006 2.86001 0.600006Z\"\n                        fill=\"#ffffff\"\n                      />\n                     </svg>\n                ),\n                name: 'All tasks',\n                active: history.location.pathname === '/',\n            },\n          ]}\n        />\n        { lists ? (\n            <List\n                items={lists}\n                onRemove={id => {\n                    const newLists = lists.filter(item => item.id !== id)\n                    setLists(newLists)\n                }}\n                isRemovable={true}\n                onClickItem={list => {\n                    history.push(`/lists/${list.id}`)\n                }}\n                activeList={activeList}\n            />\n        ) : (\n            'Loading...'\n        )}\n        <AddListButton onAddList={onAddList} colors={colors} />\n      </div>\n      <div className={\"todo__tasks\"}>\n          <Route exact path={'/'}>\n              {lists &&\n                  lists.map(list =>\n                      <Tasks\n                          key={list.id}\n                          list={list}\n                          onEditTitle={onEditListTitle}\n                          onAddTask={onAddTask}\n                          onRemoveTask={onRemoveTask}\n                          onCompleteTask={onCompleteTask}\n                          withoutEmpty\n                      />\n                  )\n              }\n          </Route>\n\n          <Route path={'/lists/:id'}>\n              {lists && activeList &&\n              <Tasks\n                  list={activeList}\n                  onEditTitle={onEditListTitle}\n                  onAddTask={onAddTask}\n                  onRemoveTask={onRemoveTask}\n                  onCompleteTask={onCompleteTask}\n              /> }\n          </Route>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Code\\todo-app\\src\\reportWebVitals.js",[],"C:\\Code\\todo-app\\src\\components\\List\\List.jsx",[],"C:\\Code\\todo-app\\src\\components\\AddListButton\\AddListButton.jsx",[],"C:\\Code\\todo-app\\src\\components\\Badge\\Badge.jsx",[],"C:\\Code\\todo-app\\src\\components\\Tasks\\Tasks.jsx",[],"C:\\Code\\todo-app\\src\\components\\Tasks\\AddTaskForm\\AddTaskForm.jsx",[],["44","45"],"C:\\Code\\todo-app\\src\\components\\Tasks\\TasksItem\\TasksItem.jsx",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":15,"column":7,"nodeType":"52","messageId":"53","endLine":15,"endColumn":15},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'location' is assigned a value but never used.","Identifier","unusedVar",["56"],["57"],"no-global-assign","no-unsafe-negation"]